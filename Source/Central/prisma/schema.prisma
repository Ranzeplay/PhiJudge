generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id              String    @id
  userName        String
  problemsCreated problem[]
  records         record[]
  isAdmin         Boolean   @default(false)
}

model problem {
  id           Int    @id @default(autoincrement())
  title        String
  description  String
  totalSubmits Int    @default(0)
  totalPassed  Int    @default(0)
  author       user   @relation(fields: [authorId], references: [id])

  testData problemTestData[]
  records  record[]

  authorId String
}

model problemTestData {
  id             Int     @id @default(autoincrement())
  problemId      Int
  input          String
  expectedOutput String
  problem        problem @relation(fields: [problemId], references: [id])
  order          Int

  timeLimitMs      Int
  memoryLimitBytes Int
}

enum RecordStatus {
  PENDING
  COMPILING
  TESTING
  PASSED
  FAILED
  ERROR
  UNKNOWN
}

enum CompilationStatus {
  PENDING
  PASSED_WITHOUT_WARNINGS
  PASSED_WITH_WARNINGS
  FAILED_WITH_ERRORS
  UNKNOWN
}

model record {
  id                 Int               @id @default(autoincrement())
  problem            problem           @relation(fields: [problemId], references: [id])
  problemId          Int
  recordTestPoint    recordTestPoint[]
  status             RecordStatus      @default(PENDING)
  submitter          user              @relation(fields: [submitterId], references: [id])
  submitterId        String
  agent              agent?            @relation(fields: [agentId], references: [id])
  agentId            String
  languageId         String
  sourceCode         String
  compilationResult  CompilationStatus @default(PENDING)
  compilationOutput  String            @default("")
  enableOptimization Boolean           @default(false)
  warningAsError     Boolean           @default(false)
  submitTime         DateTime          @default(now())
}

enum RecordTestPointStatus {
  Accepted
  WrongAnswer
  TimeLimitExceeded
  MemoryLimitExceeded
  OutputLimitExceeded
  RuntimeError
  Unknown
}

model recordTestPoint {
  id           Int    @id @default(autoincrement())
  recordId     Int
  actualOutput String
  record       record @relation(fields: [recordId], references: [id])
  order        Int

  actualTimeMs          Int
  actualPeakMemoryBytes Int
  status                RecordTestPointStatus
}

enum AgentStatus {
  DISCONNECTED
  SUSPENDED
  AVAILABLE
}

model agent {
  id                  String      @id @default(cuid())
  name                String
  status              AgentStatus @default(DISCONNECTED)
  lastHeartbeat       DateTime    @default(now())
  lastNetworkAddress  String      @default("Unknown")
  records             record[]
  availableLanguageId String[]
}
