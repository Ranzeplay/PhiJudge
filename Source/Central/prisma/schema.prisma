generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id              String    @id
  userName        String
  problemsCreated problem[]
  records         record[]
}

model problem {
  id           Int    @id @default(autoincrement())
  title        String
  description  String
  totalSubmits Int
  totalPassed  Int
  author       user   @relation(fields: [authorId], references: [id])

  testData problemTestData[]
  records  record[]

  authorId String
}

model problemTestData {
  id             Int     @id @default(autoincrement())
  problemId      Int
  input          String
  expectedOutput String
  problem        problem @relation(fields: [problemId], references: [id])

  timeLimitMs      Int
  memoryLimitBytes Int
}

enum RecordStatus {
  PENDING
  RUNNING
  PASSED
  FAILED
  ERROR
}

model record {
  id              Int               @id @default(autoincrement())
  actualOutput    String
  problem         problem           @relation(fields: [problemId], references: [id])
  problemId       Int
  recordTestPoint recordTestPoint[]
  status          RecordStatus
  submitter       user              @relation(fields: [submitterId], references: [id])
  submitterId     String
  agent           agent             @relation(fields: [agentId], references: [id])
  agentId         String
}

enum RecordTestPointStatus {
  PASSED
  FAILED
}

model recordTestPoint {
  id           Int    @id @default(autoincrement())
  recordId     Int
  actualOutput String
  record       record @relation(fields: [recordId], references: [id])

  timeLimitMs      Int
  memoryLimitBytes Int
  status           RecordTestPointStatus
}

enum AgentStatus {
  DISCONNECTED
  SUSPENDED
  AVAILABLE
}

model agent {
  id                 String      @id @default(cuid())
  name               String
  status             AgentStatus
  lastHeartbeat      DateTime
  lastNetworkAddress String
  records            record[]
}
